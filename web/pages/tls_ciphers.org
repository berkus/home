#+DATE:      7 August 2011

Choosing TLS Ciphers

I've resolved to write something here once a week (regardless of how pointless the updates may
be). For most part, this note is an outcome of this silly resolution; the remaining has to do with
an experiment I just finished.

I've been fooling around with [[http://nginx.org][nginx]] lately. It is a lightweight web server that I'm considering for
use as a lean HTTP payload dispatcher for some homegrown REST server implementations. One of the
requirements from applications that I typically write is a secure communication channel, so here's
an experiment to quantify the impact of using TLS with nginx.

* Base Numbers
Consider the following configuration,

#+BEGIN_SRC conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    server {
        listen 8080;
        location / {
            root   html;
        }
    }
}
#+END_SRC
The document root contains just a 100MB (named =100M=) file that the client will ask for.
#+BEGIN_EXAMPLE 
> ab http://localhost:8080/100M | grep "Transfer rate:"
Transfer rate:          646924.56 [Kbytes/sec] received
#+END_EXAMPLE
So, =GET= over plain HTTP gives me around 650MB/sec. This is on a VM running on my laptop, so the
absolute numbers don't matter all that much, all I'm interested in at the moment is the relative hit
one takes by introducing security into the system. To do that, I enable the SSL in nginx and retry.
#+BEGIN_SRC conf
http {
    server {
        listen 8443;
        ssl on;
        ssl_certificate nginx.crt;
        ssl_certificate_key nginx.key;
#+END_SRC 
The transfer rate drops spectacularly!
#+BEGIN_EXAMPLE 
> ab https://localhost:8443/100M | grep "Transfer rate:"
Transfer rate:          56762.58 [Kbytes/sec] received
#+END_EXAMPLE
The rate is now around 56MB/sec. That, I guess, is the price you pay for that cozy warm sense of
'security'. If you look into the =ab= output, you'll notice that the cipher negotiated for the
connection is =DHE-RSA-AES256-SHA=. Would other ciphers fare better? Can we quantify their
performance and find one that hits the sweet spot between security and performance?

* Choose Ciphers
I tweaked nginx configuration to restrict the ciphers it uses. I disabled older versions of SSL and
chose only those [[http://www.openssl.org/docs/apps/ciphers.html][ciphers]] that can work with the RSA keypair I'm using in my setup. Here is the
configuration again:
 
#+BEGIN_SRC conf
http {
    server {
        listen 8443;
	    ssl on;
	    ssl_certificate nginx.crt;
	    ssl_certificate_key nginx.key;
        ssl_protocols TLSv1;
        ssl_ciphers TLSv1+aRSA;
#+END_SRC 
Next, I measure the transfer rates using the following [[https://github.com/aldrin/ajd/blob/master/code/misc/choose_tls_ciphers.py][script]]:

#+INCLUDE "../../code/misc/choose_tls_ciphers.py" src python

Here's the output:
#+BEGIN_EXAMPLE
EXP-EDH-RSA-DES-CBC-SHA        0.0
ECDHE-RSA-DES-CBC3-SHA         16864.15
DES-CBC3-SHA                   16865.4
EDH-RSA-DES-CBC3-SHA           17100.67
EXP-RC2-CBC-MD5                24222.03
DHE-RSA-SEED-SHA               31086.12
IDEA-CBC-SHA                   32385.48
SEED-SHA                       32788.36
EDH-RSA-DES-CBC-SHA            35692.33
EXP-DES-CBC-SHA                35932.88
DES-CBC-SHA                    38223.12
DHE-RSA-CAMELLIA256-SHA        44671.38
AES256-SHA                     48434.37
CAMELLIA256-SHA                48953.65
DHE-RSA-AES256-SHA             50972.24
ECDHE-RSA-AES256-SHA           51090.07
CAMELLIA128-SHA                54000.49
ECDHE-RSA-AES128-SHA           54216.11
DHE-RSA-CAMELLIA128-SHA        54522.32
DHE-RSA-AES128-SHA             57371.71
AES128-SHA                     59464.51
RC4-SHA                        70136.63
ECDHE-RSA-RC4-SHA              71215.6
RC4-MD5                        87444.48
EXP-RC4-MD5                    94582.44
ECDHE-RSA-NULL-SHA             138267.59
NULL-SHA                       147383.06
NULL-MD5                       191907.72
#+END_EXAMPLE

=EXP-EDH-RSA-DES-CBC-SHA= fails the handshake, I'm guessing that is because it uses a very small key
size (40). The =NULL= ciphers obviously perform the best, but they are useless. The default choice
=DHE-RSA-AES256-SHA= isn't all that bad, but it is certainly not the best. The =RC4= ciphers live
upto their reputation of performance, but unfortunately I can't choose them without raising a few
eyebrows. What choices do we have then, realistically?

* Realistically
Realistically, our selection of ciphers is too permissive. =MD5= is a strict no-no and =RC4= is
considered weak, so let's tweak things to a more reasonable set: from =TLSv1+aRSA= to
=TLSv1+aRSA+HIGH:!MD5=. Here, then, is my final =nginx.conf=, in its entirety:
#+BEGIN_SRC conf
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    server {
        listen 8443;
	    ssl on;
	    ssl_certificate nginx.crt;
	    ssl_certificate_key nginx.key;
        ssl_protocols TLSv1;
        ssl_ciphers TLSv1+aRSA+HIGH:!MD5;
        location / {
            root   html;
        }
    }
}
#+END_SRC
Strictly speaking, I don't think the =!MD5= bit is required (the =TLSv1+HIGH= should be enough for
all =MD5= based ciphers to be dropped.) I re-run the script and here's what I get:
#+BEGIN_EXAMPLE
DES-CBC3-SHA                   16321.05
EDH-RSA-DES-CBC3-SHA           16853.38
ECDHE-RSA-DES-CBC3-SHA         17494.3
CAMELLIA256-SHA                50150.32
DHE-RSA-CAMELLIA256-SHA        51007.79
ECDHE-RSA-AES256-SHA           53051.46
CAMELLIA128-SHA                53740.01
AES256-SHA                     53762.62
DHE-RSA-CAMELLIA128-SHA        53861.51
DHE-RSA-AES256-SHA             54784.57
AES128-SHA                     58129.02
ECDHE-RSA-AES128-SHA           58205.45
DHE-RSA-AES128-SHA             65476.98
#+END_EXAMPLE
Turns out, with a reasonably strong cipher (=DHE-RSA-AES128-SHA=) we can extract around 10MB/sec
more out of the system than with the default cipher that the system picks for us. The gain isn't
spectacular (when compared with plain HTTP rates), but it might be handy if you're clutching for
straws.

And on that uninspiring note, this post shall suddenly shut itself.


